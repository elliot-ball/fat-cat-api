"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stackTraceAccessor = exports.hashCode = void 0;
function hashCode(str) {
    let hash = 0;
    if (str.length == 0) {
        return hash;
    }
    for (let i = 0, l = str.length; i < l; i++) {
        const ch = str.charCodeAt(i);
        hash = (hash << 5) - hash + ch;
        hash |= 0;
    }
    return hash;
}
exports.hashCode = hashCode;
function stackTraceAccessor(is_enabled, fn) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!is_enabled) {
            return fn();
        }
        const stack_trace_error = new Error(`TinyPg Captured Stack Trace`);
        try {
            return yield fn();
        }
        catch (error) {
            error.stack = `${error.stack ? `${error.stack}\nFrom: ` : ''}${stack_trace_error.stack}`;
            throw error;
        }
    });
}
exports.stackTraceAccessor = stackTraceAccessor;
//# sourceMappingURL=util.js.map