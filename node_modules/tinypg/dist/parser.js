"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseFiles = void 0;
const _ = require("lodash");
const Fs = require("fs");
const Path = require("path");
const E = require("./errors");
const tinypg_parser_1 = require("tinypg-parser");
const Glob = require('glob');
function parseFiles(root_directories) {
    const result = _.flatMap(root_directories, (root_dir) => {
        const root_path = Path.resolve(root_dir);
        const glob_pattern = Path.join(root_path, './**/*.sql');
        const files = Glob.sync(glob_pattern);
        return _.map(files, f => {
            const relative_path = f.substring(root_path.length + 1);
            const path = Path.parse(relative_path);
            const file_contents = Fs.readFileSync(f, 'utf8');
            const path_parts = _.compact(path.dir.split(Path.sep).concat(path.name));
            const sql_name = path_parts.join('_');
            const sql_key = path_parts.join('.');
            return {
                name: sql_name,
                key: sql_key,
                path: f,
                relative_path,
                text: file_contents,
                path_parts,
                parsed: tinypg_parser_1.parseSql(file_contents),
            };
        });
    });
    const conflicts = _.filter(_.groupBy(result, x => x.name), x => x.length > 1);
    if (conflicts.length > 0) {
        const message = `Conflicting sql source paths found (${_.map(conflicts, c => {
            return c[0].relative_path;
        }).join(', ')}). All source files under root dirs must have different relative paths.`;
        throw new E.TinyPgError(message);
    }
    return result;
}
exports.parseFiles = parseFiles;
//# sourceMappingURL=parser.js.map